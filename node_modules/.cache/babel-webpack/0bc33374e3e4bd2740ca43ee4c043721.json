{"ast":null,"code":"import { CreateWidgetsComponent } from 'src/app/create-widgets/create-widgets.component';\nimport { Dashboard } from 'src/app/Interfaces/Dashboard';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/material/dialog\";\nimport * as i2 from \"@angular/router\";\nimport * as i3 from \"src/app/dashboard.service\";\nimport * as i4 from \"@angular/cdk/bidi\";\nexport class WidgetsComponent {\n  constructor(dialog, route, dashboardService) {\n    this.dialog = dialog;\n    this.route = route;\n    this.dashboardService = dashboardService;\n  }\n\n  ngOnInit() {\n    this.id = this.route.snapshot.params['id'];\n    this.dashboard = new Dashboard();\n    this.dashboardService.getDashboardByID(this.id).subscribe(data => {\n      this.dashboard = data;\n    });\n  }\n\n  openDialog() {\n    let dialogRef = this.dialog.open(CreateWidgetsComponent, {});\n    dialogRef.afterClosed().subscribe(result => {});\n  }\n\n}\n\nWidgetsComponent.ɵfac = function WidgetsComponent_Factory(t) {\n  return new (t || WidgetsComponent)(i0.ɵɵdirectiveInject(i1.MatDialog), i0.ɵɵdirectiveInject(i2.ActivatedRoute), i0.ɵɵdirectiveInject(i3.DashboardService));\n};\n\nWidgetsComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: WidgetsComponent,\n  selectors: [[\"app-widgets\"]],\n  decls: 14,\n  vars: 0,\n  consts: [[\"lang\", \"en\", \"dir\", \"rtl\"], [\"charset\", \"utf-8\"], [\"http-equiv\", \"X-UA-Compatible\", \"content\", \"IE=edge\"], [\"name\", \"viewport\", \"content\", \"width=device-width, initial-scale=1\"], [\"rel\", \"stylesheet\", \"href\", \"/home/albi/Desktop/DashboardApp/src/app/components/widgets/widgets.component.scss\"], [1, \"container-fluid\"], [\"data-bind\", \"component: {name: 'dashboard-grid', params: $data}\"]],\n  template: function WidgetsComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"html\", 0);\n      i0.ɵɵelementStart(1, \"head\");\n      i0.ɵɵelement(2, \"meta\", 1);\n      i0.ɵɵelement(3, \"meta\", 2);\n      i0.ɵɵelement(4, \"meta\", 3);\n      i0.ɵɵelementStart(5, \"title\");\n      i0.ɵɵtext(6, \"Right-To-Left (RTL) demo\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(7, \"link\", 4);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(8, \"body\");\n      i0.ɵɵelementStart(9, \"div\", 5);\n      i0.ɵɵelementStart(10, \"h1\");\n      i0.ɵɵtext(11, \"RTL Demo\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(12, \"br\");\n      i0.ɵɵelement(13, \"div\", 6);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementEnd();\n    }\n  },\n  directives: [i4.Dir],\n  styles: [\"var[_ngcontent-%COMP%]   resource[_ngcontent-%COMP%];\\n (()[_ngcontent-%COMP%]   =[_ngcontent-%COMP%] >  { // webpackBootstrap\\n \\tvar __webpack_modules__ = ({\\n\\n 277:\\n\\n (() => {\\n\\nthrow new Error(\\\"Module build failed (from ./node_modules/postcss-loader/dist/cjs.js):\\\\nError: Failed to find '../node_modules/gridstack/dist/gridstack.min.css'\\\\n  in [\\\\n    /home/albi/Desktop/DashboardApp/src/app/components/widgets\\\\n  ]\\\\n    at /home/albi/Desktop/DashboardApp/node_modules/postcss-import/lib/resolve-id.js:35:13\\\\n    at async Promise.all (index 0)\\\\n    at async LazyResult.runAsync (/home/albi/Desktop/DashboardApp/node_modules/postcss/lib/lazy-result.js:394:11)\\\\n    at async Object.loader (/home/albi/Desktop/DashboardApp/node_modules/postcss-loader/dist/index.js:97:14)\\\");\\n\\n })\\n\\n \\t});\\n\\n \\t\\n \\t// startup\\n \\t// Load entry module and return exports\\n \\t// This entry module doesn't tell about it's top-level declarations so it can't be inlined\\n \\tvar __webpack_exports__ = {};\\n \\t__webpack_modules__[277]();\\n \\tresource = __webpack_exports__;\\n \\t\\n })()\\n;\", \".grid-stack-item-content[_ngcontent-%COMP%] {\\n      text-align: right; \\n    }\"]\n});","map":{"version":3,"sources":["/home/albi/Desktop/DashboardApp/src/app/components/widgets/widgets.component.ts","/home/albi/Desktop/DashboardApp/src/app/components/widgets/widgets.component.html"],"names":[],"mappings":"AAGA,SAAS,sBAAT,QAAuC,iDAAvC;AAEA,SAAS,SAAT,QAA0B,8BAA1B;;;;;;AASA,OAAM,MAAO,gBAAP,CAAuB;AAO3B,EAAA,WAAA,CAAmB,MAAnB,EAA4C,KAA5C,EAAyE,gBAAzE,EAA0G;AAAvF,SAAA,MAAA,GAAA,MAAA;AAAyB,SAAA,KAAA,GAAA,KAAA;AAA6B,SAAA,gBAAA,GAAA,gBAAA;AAAsC;;AAE/G,EAAA,QAAQ,GAAA;AAEN,SAAK,EAAL,GAAU,KAAK,KAAL,CAAW,QAAX,CAAoB,MAApB,CAA2B,IAA3B,CAAV;AAEA,SAAK,SAAL,GAAiB,IAAI,SAAJ,EAAjB;AACA,SAAK,gBAAL,CAAsB,gBAAtB,CAAuC,KAAK,EAA5C,EAAgD,SAAhD,CAA0D,IAAI,IAAE;AAC9D,WAAK,SAAL,GAAe,IAAf;AACD,KAFD;AAGD;;AAoBD,EAAA,UAAU,GAAA;AAER,QAAI,SAAS,GAAC,KAAK,MAAL,CAAY,IAAZ,CAAiB,sBAAjB,EAAwC,EAAxC,CAAd;AAGA,IAAA,SAAS,CAAC,WAAV,GAAwB,SAAxB,CAAkC,MAAM,IAAG,CAE1C,CAFD;AAGD;;AA7C0B;;;mBAAhB,gB,EAAgB,EAAA,CAAA,iBAAA,CAAA,EAAA,CAAA,SAAA,C,EAAA,EAAA,CAAA,iBAAA,CAAA,EAAA,CAAA,cAAA,C,EAAA,EAAA,CAAA,iBAAA,CAAA,EAAA,CAAA,gBAAA,C;AAAA,C;;;QAAhB,gB;AAAgB,EAAA,SAAA,EAAA,CAAA,CAAA,aAAA,CAAA,C;AAAA,EAAA,KAAA,EAAA,E;AAAA,EAAA,IAAA,EAAA,C;AAAA,EAAA,MAAA,EAAA,CAAA,CAAA,MAAA,EAAA,IAAA,EAAA,KAAA,EAAA,KAAA,CAAA,EAAA,CAAA,SAAA,EAAA,OAAA,CAAA,EAAA,CAAA,YAAA,EAAA,iBAAA,EAAA,SAAA,EAAA,SAAA,CAAA,EAAA,CAAA,MAAA,EAAA,UAAA,EAAA,SAAA,EAAA,qCAAA,CAAA,EAAA,CAAA,KAAA,EAAA,YAAA,EAAA,MAAA,EAAA,mFAAA,CAAA,EAAA,CAAA,CAAA,EAAA,iBAAA,CAAA,EAAA,CAAA,WAAA,EAAA,oDAAA,CAAA,C;AAAA,EAAA,QAAA,EAAA,SAAA,yBAAA,CAAA,EAAA,EAAA,GAAA,EAAA;AAAA,QAAA,EAAA,GAAA,CAAA,EAAA;ACW7B,MAAA,EAAA,CAAA,cAAA,CAAA,CAAA,EAAA,MAAA,EAAA,CAAA;AACA,MAAA,EAAA,CAAA,cAAA,CAAA,CAAA,EAAA,MAAA;AACE,MAAA,EAAA,CAAA,SAAA,CAAA,CAAA,EAAA,MAAA,EAAA,CAAA;AACA,MAAA,EAAA,CAAA,SAAA,CAAA,CAAA,EAAA,MAAA,EAAA,CAAA;AACA,MAAA,EAAA,CAAA,SAAA,CAAA,CAAA,EAAA,MAAA,EAAA,CAAA;AACA,MAAA,EAAA,CAAA,cAAA,CAAA,CAAA,EAAA,OAAA;AAAO,MAAA,EAAA,CAAA,MAAA,CAAA,CAAA,EAAA,0BAAA;AAAwB,MAAA,EAAA,CAAA,YAAA;AAE/B,MAAA,EAAA,CAAA,SAAA,CAAA,CAAA,EAAA,MAAA,EAAA,CAAA;AASF,MAAA,EAAA,CAAA,YAAA;AACA,MAAA,EAAA,CAAA,cAAA,CAAA,CAAA,EAAA,MAAA;AACE,MAAA,EAAA,CAAA,cAAA,CAAA,CAAA,EAAA,KAAA,EAAA,CAAA;AACE,MAAA,EAAA,CAAA,cAAA,CAAA,EAAA,EAAA,IAAA;AAAI,MAAA,EAAA,CAAA,MAAA,CAAA,EAAA,EAAA,UAAA;AAAQ,MAAA,EAAA,CAAA,YAAA;AAEZ,MAAA,EAAA,CAAA,SAAA,CAAA,EAAA,EAAA,IAAA;AACA,MAAA,EAAA,CAAA,SAAA,CAAA,EAAA,EAAA,KAAA,EAAA,CAAA;AACF,MAAA,EAAA,CAAA,YAAA;AAsEF,MAAA,EAAA,CAAA,YAAA;AACA,MAAA,EAAA,CAAA,YAAA","sourcesContent":["import { Component, OnInit } from '@angular/core';\nimport { MatDialog } from '@angular/material/dialog';\nimport { ActivatedRoute } from '@angular/router';\nimport { CreateWidgetsComponent } from 'src/app/create-widgets/create-widgets.component';\nimport { DashboardService } from 'src/app/dashboard.service';\nimport { Dashboard } from 'src/app/Interfaces/Dashboard';\n\n\n\n@Component({\n  selector: 'app-widgets',\n  templateUrl: './widgets.component.html',\n  styleUrls: ['./widgets.component.scss']\n})\nexport class WidgetsComponent implements OnInit {\n\n\n\n  id!:String\n  dashboard!:Dashboard\n\n  constructor(public dialog:MatDialog,private route:ActivatedRoute,private dashboardService:DashboardService) { }\n\n  ngOnInit(): void {\n    \n    this.id = this.route.snapshot.params['id'];\n\n    this.dashboard = new Dashboard();\n    this.dashboardService.getDashboardByID(this.id).subscribe(data=>{\n      this.dashboard=data;\n    })\n  }\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  openDialog(){\n\n    let dialogRef=this.dialog.open(CreateWidgetsComponent,{\n      \n    })\n    dialogRef.afterClosed().subscribe(result => {\n    \n    });\n  }\n\n}\n","<!-- <mat-toolbar >\n  \n    <h2 class=\"tool\" matTooltip=\"Connected\"><mat-icon id=\"mat\">panorama_fish_eye</mat-icon></h2>\n     &nbsp;&nbsp;<button  class=\"btn\" routerLink=\"/home\">Home</button>\n       &nbsp;&nbsp;|\n      <span class=\"fill\"></span>\n      <button  class=\"btn\" routerLink=\"/dashboard\"  routerLinkActive=\"active\" >Dashboard</button>\n      &nbsp;&nbsp;\n      <span class=\"fill\"></span>\n       <span class=\"material-icons\" id=\"plus\"  matTooltip=\"Add Widgets\" routerLink=\"/widgets\" (click)=\"openDialog()\">\n         add_box\n         </span>\n          \n      <span class=\"fill\"></span>\n     </mat-toolbar>\n <div class=\"box1\"></div>\n\n <h1>Widgets</h1>\n \n\n\n      -->\n\n\n<!DOCTYPE html>\n<html lang=\"en\" dir=\"rtl\"> <!-- set text reading direction -->\n<head>\n  <meta charset=\"utf-8\">\n  <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <title>Right-To-Left (RTL) demo</title>\n\n  <link rel=\"stylesheet\" href=\"/home/albi/Desktop/DashboardApp/src/app/components/widgets/widgets.component.scss\"/>\n  <style type=\"text/css\">\n    .grid-stack-item-content {\n      text-align: right; /* override demo.css */\n    }\n  </style>\n\n  <script src=\"https://cdnjs.cloudflare.com/ajax/libs/knockout/3.5.0/knockout-min.js\"></script>\n  <script src=\"../node_modules/gridstack/dist/gridstack-h5.js\"></script>\n</head>\n<body>\n  <div class=\"container-fluid\">\n    <h1>RTL Demo</h1>\n   \n    <br>\n    <div data-bind=\"component: {name: 'dashboard-grid', params: $data}\"></div>\n  </div>\n\n  <script type=\"text/javascript\">\n    ko.components.register('dashboard-grid', {\n      viewModel: {\n        createViewModel: function (controller, componentInfo) {\n          let ViewModel = function (controller, componentInfo) {\n            let grid = null;\n\n            this.widgets = controller.widgets;\n\n            this.afterAddWidget = function (items) {\n              if (!grid) {\n                grid = GridStack.init({auto: false});\n              }\n\n              let item = items.find(function (i) { return i.nodeType == 1 });\n              grid.addWidget(item);\n              ko.utils.domNodeDisposal.addDisposeCallback(item, function () {\n                grid.removeWidget(item);\n              });\n            };\n          };\n\n          return new ViewModel(controller, componentInfo);\n        }\n      },\n      template:\n        [\n          '<div class=\"grid-stack\" data-bind=\"foreach: {data: widgets, afterRender: afterAddWidget}\">',\n          '   <div class=\"grid-stack-item\" data-bind=\"attr: {\\'gs-x\\': $data.x, \\'gs-y\\': $data.y, \\'gs-w\\': $data.w, \\'gs-h\\': $data.h, \\'gs-auto-position\\': $data.auto_position}\">',\n          '     <div class=\"grid-stack-item-content\"><center><button data-bind=\"click: $root.deleteWidget\">Delete me</button><br><h5 data-bind=\"text: index\" /></center><br><p>lorem ipsum</p></div>',\n          '   </div>',\n          '</div> '\n        ].join('')\n    });\n\n    let Controller = function (widgets) {\n      let self = this;\n\n      this.widgets = ko.observableArray(widgets);\n\n      this.addNewWidget = function () {\n        this.widgets.push({\n          x: 0,\n          y: 0,\n          w: Math.floor(1 + 3 * Math.random()),\n          h: Math.floor(1 + 3 * Math.random()),\n          auto_position: true,\n          index: 'auto'\n        });\n        return false;\n      };\n\n      this.deleteWidget = function (item) {\n        self.widgets.remove(item);\n        return false;\n      };\n    };\n\n    let widgets = [\n      {x: 0, y: 0, w: 2, h: 2, index: 1},\n      {x: 2, y: 0, w: 4, h: 2, index: 2},\n      {x: 6, y: 0, w: 2, h: 4, index: 3},\n      {x: 1, y: 2, w: 4, h: 2, index: 4}\n    ];\n\n    let controller = new Controller(widgets);\n    ko.applyBindings(controller);\n  </script>\n</body>\n</html>\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}